import re
import requests
from .mongo_service import mongo_service
from datetime import datetime
import os

OLLAMA_URL = os.getenv("OLLAMA_URL", "http://host.docker.internal:11434")


class DiscussionService:
    def __init__(self):
        self.collection_name = "discussions"

    def create_discussion(self, context_id: str) -> str:
        """ Cr√©e une nouvelle discussion et retourne son ID """
        discussion = {
            "context_id": context_id,
            "summary": "",  # üîπ Commence avec un r√©sum√© vide
            "created_at": datetime.utcnow()
        }
        return mongo_service.insert_document(self.collection_name, discussion)

    def get_summary(self, discussion_id: str) -> str:
        """ R√©cup√®re le r√©sum√© actuel d'une discussion """
        discussion = mongo_service.get_document_by_id(self.collection_name, discussion_id)
        return discussion["summary"] if discussion else ""

    def update_summary(self, discussion_id, question, answer):
        """ Met √† jour le r√©sum√© en g√©n√©rant un nouveau texte condens√© """

        # üîπ V√©rifier si l'ID de la discussion est valide
        discussion = mongo_service.get_document_by_id(self.collection_name, discussion_id)
        if not discussion:
            raise RuntimeError(f"‚ùå Discussion introuvable : {discussion_id}")

        previous_summary = discussion.get("summary", "") if discussion else ""

        # üîπ Construire le texte √† r√©sumer
        text_to_summarize = f"{previous_summary}\nUtilisateur : {question}\nAssistant : {answer}"

        # üîπ G√©n√©rer un nouveau r√©sum√©
        new_summary = self.summarize_text(previous_summary, answer)

        # üîπ V√©rifier si le r√©sum√© est bien g√©n√©r√©
        if not new_summary or len(new_summary.strip()) == 0:
            raise RuntimeError(f"‚ùå Le r√©sum√© g√©n√©r√© est vide pour la discussion {discussion_id}")

        print(f"‚úÖ Nouveau r√©sum√© g√©n√©r√© :\n{new_summary}")

        # üîπ Mettre √† jour la discussion avec le nouveau r√©sum√©
        try:
            update_result = mongo_service.update_document(self.collection_name, discussion_id, {"summary": new_summary})
            if not update_result:
                raise RuntimeError(
                    f"‚ùå √âchec de la mise √† jour du r√©sum√© dans MongoDB pour la discussion {discussion_id}"
                )
        except Exception as e:
            raise RuntimeError(f"‚ùå Erreur MongoDB lors de l'update de la discussion {discussion_id}: {str(e)}")

        return new_summary

    def summarize_text(self, previous_summary, new_text):
        """ G√©n√®re un r√©sum√© mis √† jour en int√©grant les nouvelles discussions """

        prompt = (
            "üéØ Objectif : G√©n√©rer un r√©sum√© **court et synth√©tique** de la discussion en cours, "
            "en tenant compte de l'historique pr√©c√©dent que tu mettras √† jour au fur et √† mesure.\n"
            "üîπ Int√®gre les nouvelles informations de fa√ßon **fluide** sans r√©p√©tition inutile.\n"
            "üîπ Utilise des phrases courtes, directes et simples.\n"
            "üîπ Ne r√©fl√©chis pas √† la t√¢che et ne pose pas de questions, g√©n√®re uniquement le r√©sum√©.\n\n"
            f"üìù **R√©sum√© pr√©c√©dent** :\n{previous_summary}\n\n"
            f"üí¨ **Nouvelle discussion** :\n{new_text}\n\n"
            "‚ö° **R√©sum√© mis √† jour** :"
        )

        response = requests.post(
            f"{OLLAMA_URL}/api/generate",
            json={"model": "deepseek-r1:7b", "prompt": prompt, "stream": False}
        )

        if response.status_code != 200:
            print(f"‚ö†Ô∏è Erreur API Ollama: {response.text}")
            return previous_summary  # üîπ Si √©chec, on garde l'ancien r√©sum√©

        data = response.json()
        raw_summary = data.get("response", "").strip()

        # üî• Nettoyage : Suppression des balises <think> et du contenu inutile
        cleaned_summary = re.sub(r"<think>.*?</think>", "", raw_summary, flags=re.DOTALL).strip()

        return cleaned_summary

    def delete_discussion(self, discussion_id: str) -> bool:
        """ Supprime une discussion par son ID """
        discussion = mongo_service.get_document_by_id(self.collection_name, discussion_id)

        if not discussion:
            print(f"‚ùå Aucune discussion trouv√©e avec l'ID {discussion_id}")
            return False

        delete_result = mongo_service.delete_document(self.collection_name, discussion_id)

        if delete_result:
            print(f"‚úÖ Discussion supprim√©e avec succ√®s : {discussion_id}")
            return True
        else:
            print(f"‚ùå √âchec de la suppression de la discussion {discussion_id}")
            return False

    def get_all_discussions(self):
        discussions = mongo_service.get_all_documents(self.collection_name)

        if discussions:
            print(f"‚úÖ {len(discussions)} discussions trouv√©es")
        else:
            print("‚ùå Aucune discussion trouv√©e")

        return discussions or []  # Retourne un tableau vide si discussions est `None` ou vide


# Singleton
discussion_service = DiscussionService()
